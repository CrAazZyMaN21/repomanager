#!/bin/bash

# Actions regulières exécutées par cron ($WWW_USER)
set -u

# Charge les variables de repomanager
source "/etc/repomanager/vars/customs.vars"
source "/etc/repomanager/vars/main.vars"

generateConf() {
    source "${BASE_DIR}/functions/09_generateConf"
}

PERMS_ERROR=0
CHECK_VERSION_ERROR=0
GENERATE_REPO_CONF_FILES=0
LOG_DIR="${BASE_DIR}/cron/logs"
LOG="${LOG_DIR}/cronjob.daily.log"

# Création du répertoire de logs si n'existe pas
if [ ! -d "$LOG_DIR" ];then mkdir -p "$LOG_DIR";fi

# Vidage du fichier de log
if [ -f "$LOG" ];then echo -n> "$LOG";fi

# Vérification d'une nouvelle version disponible sur github
# Récupère le numéro de version qui est publié sur github dans le fichier 'version'
GITHUB_VERSION=$(curl -s -H 'Cache-Control: no-cache' "https://raw.githubusercontent.com/lbr38/repomanager/alpha/version" | grep 'VERSION=' | cut -d'=' -f2 | sed 's/"//g')
if [ -z "$GITHUB_VERSION" ];then
    (( CHECK_VERSION_ERROR++ ))
else
    echo "# Version disponible sur github" > "${BASE_DIR}/cron/github.version"
    echo "GITHUB_VERSION=\"$GITHUB_VERSION\"" >> "${BASE_DIR}/cron/github.version"
fi

# Réapplique les bons droits sur le répertoire parent des repos
cd "$REPOS_DIR"

find . -type d -exec chmod 0770 {} \;
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

find . -type f -exec chmod 0660 {} \;
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

chown -R ${WWW_USER}:repomanager "$REPOS_DIR"
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

# Regénération de tous les fichiers de conf repo (.list ou .repo) utilisés par les profils, au cas où certains seraient manquants
if [ "$MANAGE_PROFILES" == "yes" ] && [ -d "${REPOS_CONF_FILES_DIR}" ];then

    # On récupère toute la liste des repos actifs pour regénérer leur fichier de conf

    if [ "$OS_TYPE" == "Redhat" ];then
        while IFS=, read REPO_NAME;do
            REPO_NAME=$(echo "$REPO_NAME" | cut -d'=' -f2 | sed 's/"//g')

            # On fait appel à la fonction generateConf directement
            generateConf --repo-name $REPO_NAME
            if [ $? -ne "0" ];then 
                (( GENERATE_REPO_CONF_FILES++ ))
            fi
        done < $LISTE_REPO
    fi

    if [ "$OS_TYPE" == "Debian" ];then
        while IFS=, read REPO_NAME REPO_HOSTNAME REPO_DIST REPO_SECTION;do
            REPO_NAME=$(echo "$REPO_NAME" | cut -d'=' -f2 | sed 's/"//g')

            # On fait appel à la fonction generateConf directement
            generateConf --repo-name $REPO_NAME --repo-dist $REPO_DIST --repo-section $REPO_SECTION
            if [ $? -ne "0" ];then 
                (( GENERATE_REPO_CONF_FILES++ ))
            fi
        done < $LISTE_REPO
    fi
fi

if [ "$CHECK_VERSION_ERROR" -gt "0" ];then
    echo "Status=\"KO\"" >> "$LOG"
    echo "Problème lors de la vérification d'une nouvelle version" >> "$LOG"
fi

if [ "$GENERATE_REPO_CONF_FILES" -gt "0" ];then
    echo "Status=\"KO\"" >> "$LOG"
    echo "Problème lors de regénération des fichiers de conf repo des profils" >> "$LOG"
fi

if [ "$PERMS_ERROR" -gt "0" ];then
    echo "Status=\"KO\"" >> "$LOG"
    echo "Problème lors de l'application des permissions" >> "$LOG"
fi

# Si aucune erreur n'a eu lieu, on affiche un status OK
if [ "$CHECK_VERSION_ERROR" -eq "0" ] && [ "$GENERATE_REPO_CONF_FILES" -eq "0" ] && [ "$PERMS_ERROR" -eq "0" ];then
    echo "Status=\"OK\"" >> "$LOG"
fi