#!/bin/bash
set -u
# Mise à jour d'un repo (Redhat/Centos) ou d'une section de repo (Debian)

#	Format des liens sources Debian :
#	deb http://ftp.fr.debian.org/debian   stretch    main
#	    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾|‾‾‾    ‾‾|‾
#	        Hôte source et racine       Distribution  Section (main, contrib...)
# Signer des repos sous Debian : https://wiki.debian.org/DebianRepository/SetupWithReprepro

# Import de toutes les variables nécéssaires au programme
if [ -f "/etc/repomanager/vars/customs.vars" ];then
	source "/etc/repomanager/vars/customs.vars"
else
	echo "Erreur : impossible de trouver le fichier de variables customs.vars"
	exit 1
fi

if [ -f "/etc/repomanager/vars/main.vars" ];then
	source "/etc/repomanager/vars/main.vars"
else
	echo "Erreur : impossible de trouver le fichier de variables main.vars"
	exit 1
fi

source "${BASE_DIR}/functions/00_getConf"

# La fonction a besoin des paramètres suivants pour fonctionner :
# Le fichier de log dans lequel écrire
# Le nom du repo
# Le nom de l'hôte source (debian)
# Le nom du repo source (redhat/cecntos)
# Le nom de la distribution (debian)
# Le nom de la section (debian)
# Le check gpg si activé ou non
# La signature GPG du repo si activé ou non

while [ $# -ge 1 ];do case "$1" in
	--log)
		LOGFILE="$2"
		shift
	;;
	--pid)
		PID="$2"
		shift
	;;
	--repo-name)
		REPO_NAME="$2"
		shift
	;;
	--repo-real-name)
		REPO_REALNAME="$2"
		shift
	;;
	--repo-host-name)
		REPO_HOST_NAME="$2"
		shift
	;;
	--repo-dist)
		REPO_DIST="$2"
		shift
	;;
	--repo-section)
		REPO_SECTION="$2"
		shift
	;;
	--gpg-check)
		GPG_CHECK="$2"
		shift
	;;
	--gpg-resign)
		GPG_SIGN_PACKAGES="$2" # on réécrit la variable GPG_SIGN_PACKAGES par ce qui a été transmis
		shift
	;;
	*)
	esac
	shift
done

deletePid() {
	rm "${WWW_DIR}/operations/pid/${PID}.pid" -f
}

# On écrit tout ce qu'il se passe dans le fichier de log
exec &> >(tee -a "$LOGFILE")

if [ "$OS_FAMILY" == "Redhat" ];then echo "<h5>MISE A JOUR D'UN REPO</h5>";fi
if [ "$OS_FAMILY" == "Debian" ];then echo "<h5>MISE A JOUR D'UNE SECTION DE REPO</h5>";fi

## VERIFICATIONS ##

if [ "$OS_FAMILY" == "Redhat" ];then
	# Si le repo est présent dans le fichier repos.list, alors on peut commencer l'opération
	if ! egrep -q "^Name=\"${REPO_NAME}\",Realname=\"${REPO_REALNAME}\",Env=\"${DEFAULT_ENV}\"" $REPOS_LIST;then
		echo "<br><span class=\"redtext\">Erreur : </span>Il n'existe aucun repo ${REPO_NAME} sur ce serveur."
		deletePid
		exit 1
	fi

	# Si le repo existe déjà à la date du jour alors on annule l'opération
	if egrep -q "^Name=\"${REPO_NAME}\",Realname=\"${REPO_REALNAME}\",Env=\"${DEFAULT_ENV}\",Date=\"${DATE_JMA}\"" $REPOS_LIST;then
		echo "<br><span class=\"redtext\">Erreur : </span>Le repo ${REPO_NAME} existe déjà à la date du ${DATE_JMA}."        
		deletePid
		exit 1
	fi
fi

if [ "$OS_FAMILY" == "Debian" ];then
	# Si la section est présente dans le fichier repos.list, alors on peut commencer l'opération
	if ! egrep -q "^Name=\"${REPO_NAME}\",Host=\"${REPO_HOST_NAME}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" $REPOS_LIST;then
		echo "<br><span class=\"redtext\">Erreur : </span>Il n'existe aucune section ${REPO_SECTION} du repo ${REPO_NAME} (distribution : ${REPO_DIST}) sur ce serveur."
		deletePid
		exit 1
	fi
	
	# Si la section existe déjà à la date du jour alors on annule l'opération
	if egrep -q "^Name=\"${REPO_NAME}\",Host=\"${REPO_HOST_NAME}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${DATE_JMA}\"" $REPOS_LIST;then
		echo "<br><span class=\"redtext\">Erreur : </span>La section ${REPO_SECTION} du repo ${REPO_NAME} (distribution ${REPO_DIST}) existe déjà à la date du ${DATE_JMA}."
		deletePid
		exit 1
	fi

	HOST_FULL_URL=$(grep "^Name=\"${REPO_HOST_NAME}\",Url=" $HOSTS_CONF | awk -F ',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g') # Récupère l'url complète
	REPO_HOST=$(echo "$HOST_FULL_URL" | cut -d'/' -f1)
	REPO_RACINE=$(echo "$HOST_FULL_URL" | sed "s/${REPO_HOST}//g") # Extraction de la racine de l'hôte (ex pour : ftp.fr.debian.org/debian ici la racine sera debian
	if [ -z "$REPO_RACINE" ] || [ -z "$REPO_HOST" ];then
		echo "<br><span class=\"redtext\">Erreur : </span>Adresse de l'hôte incomplète. Vous devez renseigner l'hôte complet avec sa racine (ex : ftp.fr.debian.org/debian) dans votre gestionnaire d'hôtes"
		deletePid
		exit 1
	fi
fi

# Affichage du récapitulatif de l'opération
if [ "$OS_FAMILY" == "Redhat" ];then
	echo "<table>
	<tr>
		<td>Repo source :</td>
		<td><b>$REPO_REALNAME</b></td>
	</tr>
	<tr>
		<td>Nom du repo :</td>
		<td><b>$REPO_NAME</b></td>
	</tr>"
fi
if [ "$OS_FAMILY" == "Debian" ];then
	echo "<table>
	<tr>
		<td>Hôte source :</td>
		<td><b>$HOST_FULL_URL</b></td>
	</tr>
	<tr>
		<td>Nom du repo :</td>
		<td><b>$REPO_NAME</b></td>
	</tr>
	<tr>
		<td>Distribution :</td>
		<td><b>$REPO_DIST</b></td>
	</tr>
	<tr>
		<td>Section :</td>
		<td><b>$REPO_SECTION</b></td>
	</tr>"
fi

echo "<tr>
		<td>Vérification des signatures GPG :</td>
		<td><b>$GPG_CHECK</b></td>
	</tr>
	<tr>
		<td>Signature du repo :</td>
		<td><b>$GPG_SIGN_PACKAGES</b></td>
	</tr>
	</table>"










## TRAITEMENT ##

# Création du répertoire du repo/section
if [ "$OS_FAMILY" == "Redhat" ];then
	OLD_DATE_REPO=$(egrep "^Name=\"${REPO_NAME}\",Realname=\"${REPO_REALNAME}\",Env=\"${DEFAULT_ENV}\"" $REPOS_LIST | awk -F ',' '{print $4}' | cut -d'=' -f2 | sed 's/"//g')	# On récupère du coup sa date de synchro
	if ! mkdir -p "${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}";then
		echo "<span class=\"redtext\">Erreur : </span>Problème lors de la création du répertoire ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}"
		deletePid
		exit 1
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	OLD_DATE_REPO=$(egrep "^Name=\"${REPO_NAME}\",Host=\"${REPO_HOST_NAME}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" $REPOS_LIST | awk -F ',' '{print $6}' | cut -d'=' -f2 | sed 's/"//g')	# On récupère du coup sa date de synchro
	if ! mkdir -p "${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}";then
		echo "<br><span class=\"redtext\">Erreur : </span>Problème lors de la création du répertoire ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}"
		deletePid
		exit 1
	fi
fi

# Récupération des paquets
echo '<br>Récupération des paquets '
echo '<span class="getPackagesLoading">en cours<img src="images/loading.gif" class="icon" /></span><span class="getPackagesOK greentext hide">✔</span><span class="getPackagesKO redtext hide">✕</span>'

if [ "$OS_FAMILY" == "Redhat" ];then
	echo '<div class="hide getPackagesDiv"><pre>'
	
	# Lancement du clonage du repo avec reposync, deux cas possibles : 
	if [ "$GPG_CHECK" == "no" ] || [ "$NO_GPG_CHECK" -eq "1" ];then	# Cas où on ne souhaite pas vérifier la signature des paquets du repo à cloner
		if [ "$OS_VERSION" == "7" ];then
			reposync --config=${REPOMANAGER_YUM_DIR}/repomanager.conf -l --repoid=${REPO_REALNAME} --norepopath --download_path=${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/
			RESULT=$?
		fi
		if [ "$OS_VERSION" == "8" ];then
			reposync --config=${REPOMANAGER_YUM_DIR}/repomanager.conf --nogpgcheck --repoid=${REPO_REALNAME} --download-path "${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/"
			RESULT=$?
		fi
	else # Dans tous les autres cas (même si rien n'a été précisé) on active gpgcheck
		if [ "$OS_VERSION" == "7" ];then
			reposync --config=${REPOMANAGER_YUM_DIR}/repomanager.conf --gpgcheck -l --repoid=${REPO_REALNAME} --norepopath --download_path=${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/
			RESULT=$?
		fi
		if [ "$OS_VERSION" == "8" ];then
			reposync --config=${REPOMANAGER_YUM_DIR}/repomanager.conf --repoid=${REPO_REALNAME} --download-path "${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/"
			RESULT=$?
		fi
	fi
	echo '</pre></div>'
	
	if [ "$RESULT" -eq "0" ];then
		echo '<style>
		.getPackagesLoading { display: none; }
		.getPackagesOK { display: inline-block; }
		</style>'
	else
		echo '<style>
		.getPackagesLoading { display: none; }
		.getPackagesKO { display: inline-block; }
		</style>
		<span class="redtext">Erreur : </span>reposync a rencontré un problème lors de la création du miroir'
		echo "<br>Suppression de ce qui a été fait : "
		rm ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/ -rf &&
		echo '<span class="greentext">OK</span>'
		deletePid
		exit 1
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	echo '<div class="hide getPackagesDiv"><pre>'
	
	# Dans le cas où on a précisé de ne pas vérifier les signatures GPG
	if [ "$GPG_CHECK" == "no" ];then
		/usr/bin/debmirror --no-check-gpg --nosource --passive --method=http --root=$REPO_RACINE --dist=$REPO_DIST --host=$REPO_HOST --section=$REPO_SECTION --arch=amd64 ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION} --getcontents --ignore-release-gpg --progress --i18n --include='Translation-fr.*\.bz2' --postcleanup #--verbose --debug &&
		RESULT=$?
	else # Dans tous les autres cas (même si rien n'a été précisé)
		/usr/bin/debmirror --check-gpg --keyring=${GPGHOME}/trustedkeys.gpg --nosource --passive --method=http --root=$REPO_RACINE --dist=$REPO_DIST --host=$REPO_HOST --section=$REPO_SECTION --arch=amd64 ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION} --getcontents --ignore-release-gpg --progress --i18n --include='Translation-fr.*\.bz2' --postcleanup #--verbose --debug &&
		RESULT=$?
	fi
	echo '</pre></div>'
	
	if [ "$RESULT" -eq "0" ];then
		echo '<style>
		.getPackagesLoading { display: none; }
		.getPackagesOK { display: inline-block; }
		</style>'
	else
		echo '<style>
		.getPackagesLoading { display: none; }
		.getPackagesKO { display: inline-block; }
		</style>
		<br><span class="redtext">Erreur : </span>debmirror a rencontré un problème lors de la création du miroir
		<br>Suppression de ce qui a été fait : '
		rm ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION} -rf &&
		echo '<span class="greentext">OK</span>'
		deletePid
		exit 1
	fi
fi


# Signature des paquets/du repo
if [ "$OS_FAMILY" == "Redhat" ];then
	if [ "$GPG_SIGN_PACKAGES" == "yes" ];then
		echo '<br>Signature des paquets (GPG) '
		echo '<span class="signPackagesLoading">en cours<img src="images/loading.gif" class="icon" /></span><span class="signPackagesOK greentext hide">✔</span><span class="signPackagesKO redtext hide">✕</span>'
		echo '<div class="hide signRepoDiv">
		<pre>'
		
		# On se mets à la racine du repo
		cd ${REPOS_DIR}/"${DATE_JMA}_${REPO_NAME}"/ &&
		# Activation de globstar (**), cela permet à bash d'aller chercher des fichiers .rpm récursivement, peu importe le nb de sous-répertoires
		shopt -s globstar
		if [ -f "/usr/bin/rpmresign" ];then
			/usr/bin/rpmresign  --path ${GPGHOME} --name ${GPG_KEYID} --passwordfile ${PASSPHRASE_FILE} **/*.rpm
			RESULT=$?
		else
			rpmsign --addsign **/*.rpm	# Sinon on utilise rpmsign et on demande le mdp à l'utilisateur (pas possible d'utiliser un fichier passphrase)
			RESULT=$?
		fi
		echo '</pre></div>'
		
		if [ "$RESULT" -eq "0" ];then
			# Désactivation de globstar
			shopt -u globstar
			echo '<style>
			.signPackagesLoading { display: none; }
			.signPackagesOK { display: inline-block; }
			</style>'
		else
			echo '<style>
			.signPackagesLoading { display: none; }
			.signPackagesKO { display: inline-block; }
			</style>
			<span class="redtext">Erreur : </span>la signature des paquets a échouée
			<br>Suppression de ce qui a été fait : '
			rm "${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}" -rf &&
			echo '<span class="greentext">OK</span>'
			deletePid
			exit 1
		fi
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	if [ "$GPG_SIGN_PACKAGES" == "yes" ];then
		# On va utiliser un répertoire temporaire pour travailler
		TEMP_DIR="/tmp/repomanager_deb_packages"
		mkdir -p "$TEMP_DIR"
		echo '<br>Signature du repo (GPG) '
		echo '<span class="signPackagesLoading">en cours<img src="images/loading.gif" class="icon" /></span><span class="signPackagesOK greentext hide">✔</span><span class="signPackagesKO redtext hide">✕</span>'
		echo '<div class="hide signRepoDiv">
		<pre>'
		
		cd ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}/ &&	# On se mets à la racine de la section
		# On recherche tous les paquets .deb et on les déplace dans le répertoire temporaire
		find . -name "*.deb" -exec mv '{}' $TEMP_DIR \;
		# Après avoir déplacé tous les paquets on peut supprimer tout le contenu de la section
		rm -rf ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}/*
		# Création du répertoire conf et des fichiers de conf du repo
		mkdir -p ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}/conf
		# Création du fichier "distributions"
		echo -e "Origin: Repo $REPO_NAME sur ${WWW_HOSTNAME}\nLabel: apt repository\nCodename: ${REPO_DIST}\nArchitectures: i386 amd64\nComponents: ${REPO_SECTION}\nDescription: Miroir du repo ${REPO_NAME}, distribution ${REPO_DIST}, section ${REPO_SECTION}\nSignWith: ${GPG_KEYID}\nPull: ${REPO_SECTION}" > conf/distributions
		# Création du fichier "options"
		echo -e "verbose\nbasedir ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}\nask-passphrase" > conf/options
		# Cration du repo en incluant les paquets deb du répertoire temporaire, et signature du fichier Release
		/usr/bin/reprepro --gnupghome ${GPGHOME} includedeb ${REPO_DIST} ${TEMP_DIR}/*.deb
		RESULT=$?
		echo '</pre></div>'

		if [ $RESULT -eq "0" ];then
			echo '<style>
			.signPackagesLoading { display: none; }
			.signPackagesOK { display: inline-block; }
			</style>'
		else
			echo "<style>
			.signPackagesLoading { display: none; }
			.signPackagesKO { display: inline-block; }
			</style>
			<br><span class=\"redtext\">Erreur : </span>la signature de la section <b>$REPO_SECTION</b> du repo <b>$REPO_NAME</b> a échouée
			<br>Suppression de ce qui a été fait : "
			rm "${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}" -rf &&
			echo '<span class="greentext">OK</span>'
			deletePid
			exit 1
		fi
	fi
fi


# Création des metadata du repo (Redhat/centos uniquement)
if [ "$OS_FAMILY" == "Redhat" ];then
	echo '<br>Création du dépôt (metadata) '
	echo '<span class="createRepoLoading">en cours<img src="images/loading.gif" class="icon" /></span><span class="createRepoOK greentext hide">✔</span><span class="createRepoKO redtext hide">✕</span>'
	echo '<div class="hide">
	<pre>'
	createrepo -v ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/
	RESULT=$?
	echo '</pre></div>'
	if [ $RESULT -eq "0" ];then
		echo '<style>
		.createRepoLoading { display: none; }
		.createRepoOK { display: inline-block; }
		</style>'
	else
		echo '<style>
		.createRepoLoading { display: none; }
		.createRepoKO { display: inline-block; }
		</style>
		<br><span class="redtext">Erreur : </span>la création du repo a échouée
		<br>Suppression de ce qui a été fait : '
		rm ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/ -rf &&
		echo '<span class="greentext">OK</span>'
		deletePid
		exit 1
	fi
fi


# Création du lien symbolique (environnement)
if [ "$OS_FAMILY" == "Redhat" ];then
	cd ${REPOS_DIR}/ &&
	unlink ${REPO_NAME}_${DEFAULT_ENV} # Supression du lien symbolique pointant sur l'ancienne version du repo
	ln -sf ${DATE_JMA}_${REPO_NAME}/ ${REPO_NAME}_${DEFAULT_ENV}
	if [ $? -ne "0" ];then
		echo '<br><span class="redtext">Erreur : </span>la finalisation du repo a échouée'
		deletePid
		exit 1
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	cd ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/ &&  # Retour au répertoire de base pour traiter la suite
	unlink ${REPO_SECTION}_${DEFAULT_ENV} # Supression du lien symbolique pointant sur l'ancienne version du repo
	ln -sf ${DATE_JMA}_${REPO_SECTION}/ ${REPO_SECTION}_${DEFAULT_ENV}	# Puis création du nouveau, pointant sur la nouvelle version à la date du jour
	if [ $? -ne "0" ];then
		echo '<br><span class="redtext">Erreur : </span>la finalisation du repo a échouée'
		deletePid
		exit 1
	fi
fi

# Archivage
if [ "$OS_FAMILY" == "Redhat" ];then
	if ! egrep "^Name=\"${REPO_NAME}\",Realname=\".*\",Env=\".*\",Date=\"${OLD_DATE_REPO}\"" $REPOS_LIST | grep -v -q "Env=\"${DEFAULT_ENV}\"";then
		echo "<br>La version précédente du ${OLD_DATE_REPO} n'est pas utilisée par d'autres environnements (donc elle n'est plus utilisée)"
		OLD_DESCRIPTION=$(egrep "^Name=\"${REPO_NAME}\",Realname=\".*\",Env=\"${DEFAULT_ENV}\"" "$REPOS_LIST" | awk -F',' '{print $5}' | cut -d'=' -f2 | sed 's/"//g')
		OLD_REALNAME=$(egrep "^Name=\"${REPO_NAME}\",Realname=\".*\",Env=\"${DEFAULT_ENV}\"" "$REPOS_LIST" | awk -F',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g') # on récupère aussi l'ancien hote au cas où il soit différent 
		echo "<br>Archivage de l'ancienne version : "
		cd ${REPOS_DIR}/ &&
		mv "${OLD_DATE_REPO}_${REPO_NAME}/" "archived_${OLD_DATE_REPO}_${REPO_NAME}/" # On renomme l'ancienne version en tant que old_prod_JJ-MM-AAAA_base/
		echo '<span class="greentext">OK</span>'
		# Mise à jour des informations dans repos-archive.list
		echo "Name=\"${REPO_NAME}\",Realname=\"${OLD_REALNAME}\",Date=\"${OLD_DATE_REPO}\",Description=\"${OLD_DESCRIPTION}\"" >> $REPOS_ARCHIVE_LIST
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	# Si l'ancienne version n'est pas utilisée par un autre environnement alors on l'archive. Pour cela on affiche toutes les lignes contenant notre repo, et on retire celle contenant Env=${DEFAULT_ENV} afin d'afficher tous les autres éventuels envs qui utilisent ce repo (si il y en a)
	if ! egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\".*\",Date=\"${OLD_DATE_REPO}\"" $REPOS_LIST | grep -v -q "Env=\"${DEFAULT_ENV}\"";then
		echo "<br>La version précédente du ${OLD_DATE_REPO} n'est pas utilisée par d'autres environnements (donc elle n'est plus utilisée)"
		OLD_DESCRIPTION=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" "$REPOS_LIST" | awk -F',' '{print $7}' | cut -d'=' -f2 | sed 's/"//g')
		OLD_HOST_NAME=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" "$REPOS_LIST" | awk -F',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g') # on récupère aussi l'ancien hote au cas où il soit différent 
		echo "<br>Archivage de l'ancienne version : "
		cd ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/ &&
		mv "${OLD_DATE_REPO}_${REPO_SECTION}/" "archived_${OLD_DATE_REPO}_${REPO_SECTION}/" # On renomme l'ancienne version en tant que old_prod_JJ-MM-AAAA_base/
		echo '<span class="greentext">OK</span>'
		# Mise à jour des informations dans repos-archive.list
		echo "Name=\"${REPO_NAME}\",Host=\"${OLD_HOST_NAME}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Date=\"${OLD_DATE_REPO}\",Description=\"${OLD_DESCRIPTION}\"" >> $REPOS_ARCHIVE_LIST
	fi
fi













# Ajout des informations dans repos.list
if [ "$OS_FAMILY" == "Redhat" ];then
	sed -i "s|^Name=\"${REPO_NAME}\",Realname=\".*\",Env=\"${DEFAULT_ENV}\",Date=\"${OLD_DATE_REPO}\"|Name=\"${REPO_NAME}\",Realname=\"${REPO_REALNAME}\",Env=\"${DEFAULT_ENV}\",Date=\"${DATE_JMA}\"|g" $REPOS_LIST  # On mets à jour les infos dans le fichier repos.list (par exemple)
	if [ $? -ne "0" ];then
		echo "<br><span class=\"redtext\">Erreur :</span>l'ajout du repo <b>$REPO_NAME</b> à la liste des repos actifs a échoué"
		deletePid
		exit 1
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	sed -i "s|^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${OLD_DATE_REPO}\"|Name=\"${REPO_NAME}\",Host=\"${REPO_HOST_NAME}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${DATE_JMA}\"|g" $REPOS_LIST  # On mets à jour les infos dans le fichier repos.list (par exemple)
	if [ $? -ne "0" ];then
		echo "<br><span class=\"redtext\">Erreur :</span>l'ajout de la section <b>$REPO_SECTION</b> du repo <b>$REPO_NAME</b> à la liste des repos actifs a échoué"
		deletePid
		exit 1
	fi
fi


# Application des droits sur le repo/section créé
if [ "$OS_FAMILY" == "Redhat" ];then
	find ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/ -type f -exec chmod 0660 {} \; &&
	find ${REPOS_DIR}/${DATE_JMA}_${REPO_NAME}/ -type d -exec chmod 0770 {} \;
	if [ $? -ne "0" ];then
		echo "<br><span class=\"redtext\">Erreur :</span>l'application des permissions sur le repo <b>$REPO_NAME</b> a échoué"
		deletePid
		exit 1
	fi
fi
if [ "$OS_FAMILY" == "Debian" ];then
	find ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}/ -type f -exec chmod 0660 {} \; &&
	find ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/${DATE_JMA}_${REPO_SECTION}/ -type d -exec chmod 0770 {} \;
	if [ $? -ne "0" ];then
		echo "<br><span class=\"redtext\">Erreur :</span>l'application des permissions sur la section <b>$REPO_SECTION</b> a échoué"
		deletePid
		exit 1
	fi
fi

echo '<br><span class="greentext">Opération terminée</span><br>'
deletePid # Suppression du PID (fonction créée en début de fichier)
exit 0