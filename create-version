#!/bin/bash
# Création d'une nouvelle archive de version

set -u
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

DEV_DIR="$HOME/github/repomanager"
DEV_BRANCH="stable"
ARCHIVE_PATH="$HOME/repomanager/releases"
IGNORE_FILE="$HOME/github/repomanager/.tarignore" # Contient les fichiers à ne pas inclure à l'archive tar
TMP_DIR="/tmp/repomanager"
CONFIRM=""

mkdir -p "$ARCHIVE_PATH"

echo -e "$YELLOW\n --- New release packaging --- $RESET\n"

echo -e "Git status:"
git status

echo -e "\n You must have dealed with all conflicts and pushed your work before creating a new release."
echo -ne " Continue ? (y/n): "; read -p "" CONFIRM
if [ "$CONFIRM" != "y" ];then
    exit
fi

echo -ne "\n Specify release version (e.g: 3.2.0): "; read -p "" VERSION

# Final version name
VERSION="v${VERSION}-${DEV_BRANCH}"
echo " Release version: ${YELLOW}${VERSION}${RESET}"
echo -ne " Confirm (y/n) : "; read -p "" CONFIRM
if [ "$CONFIRM" != "y" ];then
    exit
fi

# Push new version to version file
echo "$VERSION" > ${DEV_DIR}/www/version

# Remove '/tmp/repomanager' if already exist
rm "$TMP_DIR" -rf
if [ $? -ne "0" ];then
    echo -e "${YELLOW}Error while cleaning '$TMP_DIR' $RESET"
    exit
fi

# Copy dev dir content to the tmp dir
cp -r $DEV_DIR $TMP_DIR
if [ $? -ne "0" ];then
    echo -e "${YELLOW}Error while copying '$DEV_DIR' to '$TMP_DIR' $RESET"
    exit
fi

cd /tmp

# Create tar archive
echo -ne "\n Create tar archive: "
# If an archive with the same name already exist, then remove it 
rm ${ARCHIVE_PATH}/repomanager_${VERSION}.tar.gz -f

tar pczf ${ARCHIVE_PATH}/repomanager_${VERSION}.tar.gz --exclude-from=${DEV_DIR}/.tarignore repomanager
if [ $? -ne "0" ];then
    echo -e "${YELLOW}Error while creating the archive" $RESET
    exit
fi
echo -e "[$GREEN OK $RESET]"

# Remove tmp dir
rm "$TMP_DIR" -rf

echo -e "$GREEN\n Successfully created archive '${ARCHIVE_PATH}/repomanager_${VERSION}.tar.gz' $RESET"

exit