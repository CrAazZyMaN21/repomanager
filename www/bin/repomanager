#!/usr/bin/env bash
set -u
export TERM="xterm-256color"
export COLUMNS=190
export GPG_TTY=$(tty)

# Main variables
PWD=$(dirname "$0")
OS_FAMILY=""
WWW_DIR="/var/www/repomanager"
WWW_USER=""
WWW_HOSTNAME=""
DATA_DIR="/var/lib/repomanager"
REPOS_DIR="/home/repo"
DB="$DATA_DIR/db/repomanager.db"
GPGHOME="$DATA_DIR/.gnupg"
CONF="$DATA_DIR/configurations/repomanager.conf"
CONFIRM=""
CHECK_DEP=""

PROCEED_INSTALLATION="0"
PROCEED_DEPENDENCIES="0"
PROCEED_PERMISSIONS="0"

# Colors
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# User detection
if [ "$(id -u)" -ne "0" ];then
    echo -e "\n${YELLOW}Must be executed with sudo${RESET}\n"
    exit
fi

## ↓ FUNCTIONS ↓ ##

# print help
function help
{ 
    echo -e "\n   Available parameters:"
    echo -e "   -i | --install          ➤  Execute repomanager installation wizard."
    echo -e "   -p | --set-permissions  ➤  Set permissions on repomanager directories and files."
    echo -e "   -d | --check-deps       ➤  Check and install missing dependencies."
    echo -e "   -s | --deploy-service   ➤  Deploy repomanager service.\n\n\n"
}

# System check
function checkSystem
{
    # /etc/os-release is present on most of the recent OS and is a good way to get OS informations
    if [ -f "/etc/os-release" ];then
        if grep -q "^ID_LIKE=" /etc/os-release;then
            OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        elif grep -q "^ID=" /etc/os-release;then
            OS_FAMILY=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        fi

        # # If ID_LIKE and ID are both present in /etc/os-release then ID_LIKE has priority
        # if egrep -q "^ID_LIKE=" /etc/os-release && egrep -q "^ID=" /etc/os-release;then
        #     OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        # fi

        if [ -z "$OS_FAMILY" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS family"
            exit
        fi

        # If OS_FAMILY has one of the following pattern then is it Redhat family
        if echo "$OS_FAMILY" | egrep -q -i 'rhel|centos|fedora';then
            OS_FAMILY="Redhat"
        fi

        # If OS_FAMILY has one of the following pattern then is it Debian family
        if echo "$OS_FAMILY" | egrep -q -i 'debian|ubuntu|kubuntu|xubuntu|armbian|mint';then
            OS_FAMILY="Debian"
        fi

        # If OS_FAMILY is neither Redhat or Debian family then this OS is not supported
        if ! echo "$OS_FAMILY" | egrep -q -i 'Redhat|Debian';then
            echo -e "[${YELLOW} ERROR ${RESET}] Unsupported OS ($OS_FAMILY)"
            exit
        fi

        # Get OS name and version from /etc/os-release
        OS_NAME=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
        OS_VERSION=$(grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')

        if [ -z "$OS_NAME" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS name"
            exit
        fi
        if [ -z "$OS_VERSION" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS version"
            exit
        fi
    fi

    # Case /etc/os-release does not exist
    if [ ! -f "/etc/os-release" ];then
        # If apt is present then it is Debian family
        if [ -f "/usr/bin/apt" ];then
            OS_FAMILY="Debian"
        fi
		# If yum or dnf is present then it is Redhat family
        if [ -f "/usr/bin/yum" ] || [ -f "/usr/bin/dnf" ];then
            OS_FAMILY="Redhat"
        fi

        # At this point if OS_FAMILY is empty then it is an unsupported OS
        if [ -z "$OS_FAMILY" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unsupported OS Family (unknown OS family)"
            exit
        fi

		# Try to get OS name and version

        # /usr/bin/lsb_release is only present on Debian based distributions
        if [ -f "/usr/bin/lsb_release" ];then
            OS_NAME=$(lsb_release -a 2> /dev/null | grep 'Distributor ID:' | awk '{print $NF}')
            OS_VERSION=$(lsb_release -a 2> /dev/null | grep 'Release:' | awk '{print $NF}')
        fi
        # Last chance for Fedore/Redhat based distributions
        # If /etc/centos-release exists, then is is CentOS
        if [ -f "/etc/centos-release" ];then
            OS_NAME="CentOS"
            OS_VERSION=$(rpm --eval '%{centos_ver}')
        fi
        # If /etc/fedora-release exists, then it is Fedora
        if [ -f "/etc/fedora-release" ];then
            OS_NAME="Fedora"
            OS_VERSION=$(cat /etc/os-release | grep "VERSION_ID" | cut -d'=' -f2 | sed 's/"//g')
        fi

        # Quits if nothing as been found at this point
        if [ -z "$OS_NAME" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS name"
            exit
        fi 
        if [ -z "$OS_VERSION" ];then
            echo -e "[${YELLOW} ERROR ${RESET}] Unknown OS version"
            exit
        fi
    fi
}

# Set correct permissions on all directories and files used by repomanager
function permissions
{
    ACTUAL_USER=$(whoami)

    # Check if directories and files exist
    if [ ! -d "$WWW_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] '$WWW_DIR' web directory not found."
        exit 1
    fi
    if [ ! -d "$DATA_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] '$DATA_DIR' data directory not found."
        exit 1
    fi
    if [ ! -d "$REPOS_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] '$REPOS_DIR' repos directory not found."
        exit 1
    fi

    if [ -z "$WWW_USER" ];then
        WWW_USER=$(/usr/bin/sqlite3 -noheader -batch -cmd '.timeout 5000' "$DB" "SELECT WWW_USER FROM settings" | sed 's/ //g')
        if [ $? -ne 0 ];then
            echo -e "[$YELLOW ERROR $RESET] Unable to get WWW_USER from database."
            exit 1
        fi
        if [ -z "$WWW_USER" ];then
            echo -e "[$YELLOW ERROR $RESET] WWW_USER could not be retrieved from database."
            exit 1
        fi
    fi

    echo -ne "${YELLOW} Setting permissions... ${RESET}"
 
    # Permissions on web directory
    find "$WWW_DIR" -type f -exec chmod 0660 {} \;
    find "$WWW_DIR" -type d -exec chmod 0770 {} \;
    chmod 750 "$WWW_DIR"
    chown -R ${WWW_USER}:repomanager "$WWW_DIR"
    # Permissions on data directory
    find "$DATA_DIR" -type f -exec chmod 0660 {} \;
    find "$DATA_DIR" -type d -exec chmod 0770 {} \;
    chmod 750 "$DATA_DIR"
    chown -R ${WWW_USER}:repomanager "$DATA_DIR"
        
    if [ -f "$DATA_DIR/repomanager" ];then
        chmod 550 $DATA_DIR/repomanager
    fi
    if [ -f "$WWW_DIR/bin/repomanager" ];then
        chmod 550 $WWW_DIR/bin/repomanager
    fi
    if [ -f "$DATA_DIR/tools/service/repomanager-service" ];then
        chmod 550 $DATA_DIR/tools/service/repomanager-service
    fi
    if [ -f "$WWW_DIR/bin/service/repomanager-service" ];then
        chmod 550 $WWW_DIR/bin/service/repomanager-service
    fi

    # Permissions on repos directory
    # No chmod here because it can be a large directory and it could take too much time. The repomanager service will take care of it.
    chown -R ${WWW_USER}:repomanager "$REPOS_DIR"

    # Permissions on .gnupg directory
    if [ -d "$GPGHOME" ];then
        chown -R ${WWW_USER}:repomanager $GPGHOME
        chmod 700 $GPGHOME
        # Permissions on passphrase
        if [ -f "$GPGHOME/passphrase" ];then 
            chmod 400 $GPGHOME/passphrase
        fi
    fi
    # Permissions on GPG public key
    if [ -d "$REPOS_DIR/gpgkeys" ];then
        chown ${WWW_USER}:repomanager $REPOS_DIR/gpgkeys/*pub
        chmod 440 $REPOS_DIR/gpgkeys/*pub
    fi

    # Permissions on perl's module rpmresign (perl/RPM4)
    # Setting permission to allow WWW_USER to pass through the following RPM4 directories
    if [ -d "/usr/local/lib64/perl5/RPM4/" ];then
        chmod o+rx /usr/local/lib64/perl5/RPM4
        find /usr/local/lib64/perl5/RPM4/ -type d -exec chmod o+rx {} \;
        find /usr/local/lib64/perl5/RPM4/ -type f -exec chmod o+r {} \;
    fi
    if [ -d "/usr/local/lib64/perl5/auto" ];then 
        chmod o+rx /usr/local/lib64/perl5/auto
    fi
    if [ -d "/usr/local/lib64/perl5/auto/RPM4" ];then
        chmod o+rx /usr/local/lib64/perl5/auto/RPM4
    fi
    if [ -d "/usr/local/lib64/perl5" ];then
        chmod o+rx /usr/local/lib64/perl5
    fi
    if [ -f "/usr/local/lib64/perl5/RPM4.pm" ];then
        chmod o+r /usr/local/lib64/perl5/RPM4.pm
    fi

    echo -e "${GREEN}OK${RESET}\n"
}

# Check and install missing dependencies
function checkDependencies
{
    echo -e "\nChecking dependencies..."

    ## Redhat ##
    if [ "$OS_FAMILY" == "Redhat" ];then
        CHECK_DEP=$(rpm -qa curl)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing curl\t" &&
            yum install curl -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa findutils)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing findutils\t" &&
            yum install findutils -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa gnupg2)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing gnupg2\t" &&
            yum install gnupg2 -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(rpm -qa git)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing git\t" &&
            yum install git -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    ## Debian ##
    if [ "$OS_FAMILY" == "Debian" ];then
        CHECK_DEP=$(dpkg --list | grep "^ii  curl ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing curl\t" &&
            apt-get -qq install curl -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  findutils ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing findutils\t" &&
            apt-get -qq install findutils -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  git ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing git\t" &&
            apt-get -qq install git -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        CHECK_DEP=$(dpkg --list | grep "^ii  gnupg2 ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing gnupg2\t" &&
            apt-get -qq install gnupg2 -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    ## Additionnal dependencies ##

 
    if [ "$OS_FAMILY" == "Redhat" ];then
        CHECK_DEP=$(rpm -qa rpm-sign)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing rpm-sign\t" &&
            yum install rpm-sign -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
        CHECK_DEP=$(rpm -qa createrepo_c)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing createrepo_c\t" &&
            yum install createrepo_c -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    if [ "$OS_FAMILY" == "Debian" ];then
        CHECK_DEP=$(dpkg --list | grep "^ii  rpm ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing rpm\t" &&
            apt-get -qq install rpm -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
        
        # librpmsign package has different name depending on the Debian version
        if [ "$OS_VERSION" == "10" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  librpmsign8 ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing librpmsign8\t" &&
                apt-get -qq install librpmsign8 -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
        if [ "$OS_VERSION" == "11" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  librpmsign9 ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing librpmsign9\t" &&
                apt-get -qq install librpmsign9 -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
    
        # createrepo package has different name depending on the Debian version
        # If Debian 10
        if [ "$OS_VERSION" == "10" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  createrepo ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing createrepo\t" &&
                apt-get -qq install createrepo -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
    
        # If Debian 11
        if [ "$OS_VERSION" == "11" ];then
            CHECK_DEP=$(dpkg --list | grep "^ii  createrepo-c ")
            if [ -z "$CHECK_DEP" ];then
                echo -ne "Installing createrepo-c\t" &&
                apt-get -qq install createrepo-c -y > /dev/null &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
    fi

    # Check gnupg2 version and install 'RPM4' perl module if gpg version does not support non-interactive package signature
    if [ ! -f "/usr/bin/gpg2" ];then
        echo -e "  [$YELLOW ERROR $RESET] Cannot find gnupg2 binary."
        exit
    fi

    GPG_VERSION=$(/usr/bin/gpg2 --version | head -n1 | awk '{print $3}')

    # Gnupg2 version must be at least 2.1.x to be able to correctly sign packages. If not then build RPM4 module.
    if ! echo "$GPG_VERSION" | egrep -q "^2.1.|^2.2.";then
        if [ "$OS_FAMILY" == "Redhat" ];then
            if [ ! -f "/usr/bin/rpmresign" ];then
                echo -ne "Installing RPM4 perl module (rpmresign) from CPAN\t" &&
                yum install gcc perl-devel rpm-devel perl-CPAN perl-App-cpanminus -y > /dev/null &&
                cpanm PkgConfig --force &&
                cpanm RPM4 --force && 
                ln -s /usr/local/bin/rpmresign /usr/bin/rpmresign &&
                echo -e "[${GREEN} OK ${RESET}]"
            fi
        fi
    
        if [ "$OS_FAMILY" == "Debian" ];then
            echo -e "[$YELLOW ERROR $RESET] Gnupg2 version is too old, RPM package signature is not possible."
            exit
        fi
    fi
   

    if [ "$OS_FAMILY" == "Redhat" ];then
        # Installing epel repo to get reprepro package
        CHECK_DEP=$(rpm -qa epel-release)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing epel-release\t" &&
            yum install epel-release -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi

        yum clean all -q

        CHECK_DEP=$(rpm -qa reprepro)
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing reprepro\t" &&
            yum install reprepro -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi

    if [ "$OS_FAMILY" == "Debian" ];then
        CHECK_DEP=$(dpkg --list | grep "^ii  reprepro ")
        if [ -z "$CHECK_DEP" ];then
            echo -ne "Installing reprepro\t" &&
            apt-get -qq install reprepro -y > /dev/null &&
            echo -e "[${GREEN} OK ${RESET}]"
        fi
    fi
}

# Deploy repomanager systemd service
function deployService
{
    # Exit function if datadir directory does not exist
    if [ ! -d "$DATA_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot find ${YELLOW}${DATA_DIR}${RESET} directory..."
        return
    fi

    # Exit function if services files cannot be found
    if [ ! -f "$WWW_DIR/bin/service/repomanager.systemd.template" ];then
        echo -e "[$YELLOW ERROR $RESET] Systemd template service file ${YELLOW}${WWW_DIR}/bin/service/repomanager.systemd.template${RESET} does not exist..."
        return
    fi
    if [ ! -f "$WWW_DIR/bin/service/repomanager-service" ];then
        echo -e "[$YELLOW ERROR $RESET] Repomanager service script ${YELLOW}${WWW_DIR}/bin/service/repomanager-service${RESET} does not exist..."
        return
    fi

    # Deploy systemd service template file
    echo -ne "\n➤ Deploying service... "
    \cp "$WWW_DIR/bin/service/repomanager.systemd.template" /lib/systemd/system/repomanager.service &&
    ln -fs /lib/systemd/system/repomanager.service /etc/systemd/system/repomanager.service &&
    chmod 700 "$WWW_DIR/bin/service/repomanager-service"

    systemctl daemon-reload --quiet
    systemctl enable repomanager --quiet
    systemctl start repomanager --quiet

    echo -e "${GREEN}Done${RESET}"
}

# Installation wizard
function installation
{
    cd "$PWD"

    if [ ! -d "$PWD/www/" ] || [ ! -d "$PWD/tools/" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot find installation directories... Have you cloned the repository?"
        exit 1
    fi

    echo -e " ${YELLOW}Welcome to Repomanager setup wizard${RESET}\n"

    #### DEPENDENCIES ####

    checkDependencies

    #### INSTALLATION ####

    echo -e "\n➤ Repomanager web sources files will be stored in ${YELLOW}$WWW_DIR/${RESET}"
    echo -e "➤ Repomanager data files will be stored in ${YELLOW}$DATA_DIR/${RESET}. Please do not remove or move this directory and be sure to make daily backup of this directory."
    echo -e "➤ Repomanager repositories will be stored in ${YELLOW}$REPOS_DIR/${RESET}\n"

    if [ -d "$WWW_DIR" ];then
        echo -n "  Web directory ${YELLOW}${WWW_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            exit 1
        fi
    fi
    if [ -d "$DATA_DIR" ];then
        echo -n "  Data directory ${YELLOW}${DATA_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            exit 1
        fi
    fi
    if [ -d "$REPOS_DIR" ];then
        echo -n "  Repos directory ${YELLOW}$REPOS_DIR${RESET} already exist, its content will be deleted. Confirm (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            exit 1
        fi
    fi

    # Get hostname
    while [ -z "$WWW_HOSTNAME" ];do
        echo -ne "  Please specify what will be Repomanager URL (e.g. https://repomanager.mydomain.net): https://"; read -p "" WWW_HOSTNAME
    done

    # Delete webdir, datadir and repodir content
    rm "$WWW_DIR" -rf
    rm "$DATA_DIR" -rf
    rm "$REPOS_DIR" -rf

    # Create webdir, datadir and repodir
    mkdir -p "$WWW_DIR"
    mkdir -p "$DATA_DIR"
    mkdir -p "$REPOS_DIR"

    # Create main directories
    mkdir -p "$DATA_DIR/logs/"
    mkdir -p "$DATA_DIR/logs/main/"
    mkdir -p "$DATA_DIR/logs/service/"
    mkdir -p "$DATA_DIR/logs/stats/"

    # Copy web sources
    cp -r $PWD/www/* $WWW_DIR/

    # Copy scripts and tools to datadir
    cp -r $PWD/tools $DATA_DIR/

    #### CONFIGURATION ####

    ## Webserver user
    # Try to detect web user
    WWW_USER=""
    if grep -q "^nginx:" /etc/passwd;then
        WWW_USER="nginx"
    elif grep -q "^www-data:" /etc/passwd;then
        WWW_USER="www-data"
    elif grep -q "^apache:" /etc/passwd;then
        WWW_USER="apache"
    fi
    # Si more than one web users are detected then variable is leaved empty. User will have to manualy specify which web user to use.
    if egrep -q "^nginx:" /etc/passwd && egrep -q "^www-data:" /etc/passwd && egrep -q "^apache:" /etc/passwd;then
        WWW_USER=""
    fi

    while [ -z "$WWW_USER" ];do
        echo -ne "\n➤ Specifying webserver user (generally nginx or www-data): "; read -p "" WWW_USER
    done

    # Create repomanager group
    if ! grep -q "repomanager" /etc/group;then
        groupadd repomanager
    fi

    # Webserver user is added to the group members
    usermod -G repomanager "$WWW_USER"

    # Create symlink to repomanager executable
    ln -sf $WWW_DIR/bin/repomanager /usr/bin/repomanager

    # Set basic permissions
    chown -R $WWW_USER:repomanager "$WWW_DIR" "$DATA_DIR" "$REPOS_DIR"

    # Deploy repomanager service
    deployService

    # Try to generate database by curling the web interface
    curl -s http://$WWW_HOSTNAME > /dev/null

    echo -e "\n ${GREEN}Installation success!${RESET}"
    echo -e "\n Connect to repomanager through a web browser: ${YELLOW}https://${WWW_HOSTNAME}${RESET}"
    echo -e " Login:    ${YELLOW}admin${RESET}"
    echo -e " Password: ${YELLOW}repomanager${RESET}\n"
}

echo '

 ______  ____ ______   ____   _____ _____   ____  _____    ____   ___________
 \_  _ \/ __ \\____ \ /  _ \ /     \\__  \ /     \\__  \  / ___\_/ __ \_  __ \
 |  | \|  ___/|  |_> )  (_) )  Y Y  \/ __ \|   |  \/ __ \/ /_/  >  ___/|  | \/
 |__|   \___  >   __/ \____/|__|_|  (____  /___|  (____  |___  / \___  >__|
            \/|__|                \/     \/     \/     \/_____/      \/
           
'

while [ $# -ge 1 ];do
    case "$1" in
        --help|-help|-h)
            help
            exit
           ;;
        --first-install|--install|-i)
            PROCEED_INSTALLATION="1"
        ;;
        --set-permissions|--permissions|-p)
            PROCEED_PERMISSIONS="1"
        ;;
        --check-deps|-d)
            PROCEED_DEPENDENCIES="1"
        ;;
        --deploy-service|-s)
            deployService
            exit
        ;;
        *)
            echo "Unknown parameter: $1"
            help
            exit
        ;;
    esac
    shift
done

if [ "$PROCEED_INSTALLATION" == "1" ];then
    checkSystem
    installation
    permissions
    exit
fi

if [ "$PROCEED_DEPENDENCIES" == "1" ];then
    checkSystem
    checkDependencies
    exit
fi

if [ "$PROCEED_PERMISSIONS" == "1" ];then
    permissions
    exit
fi

help

exit