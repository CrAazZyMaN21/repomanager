#!/bin/bash
# Script de mise à jour de repomanager
# Il télécharge la dernière archive tar.gz disponible, la décompresse et copie les fichiers et répertoires
set -u

CURRENT="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
WWW_DIR=$(echo "$CURRENT" | sed 's|/tools||g')
GITHUB_VERSION=$(cat ${WWW_DIR}/cron/github.version)
UPDATE_ERROR=0

if [ -z "$GITHUB_VERSION" ];then
    exit 1
fi

# On supprime le répertoire de travail si existe déjà, puis on le recrée vide
rm /tmp/repomanager-update_${GITHUB_VERSION}/ -rf &&
mkdir -p /tmp/repomanager-update_${GITHUB_VERSION}/ &&
mkdir -p /tmp/repomanager-update_${GITHUB_VERSION}/backup-conf &&
cd /tmp/repomanager-update_${GITHUB_VERSION}/

# Répertoire qui contiendra les sauvegardes de configuration actuelles
BACKUP_CONF_DIR="/tmp/repomanager-update_${GITHUB_VERSION}/backup-conf"

# Sauvegarde des configurations actuelles
cp ${WWW_DIR}/ressources/styles/colors.php ${BACKUP_CONF_DIR}/
cp ${WWW_DIR}/configurations/repomanager.conf ${BACKUP_CONF_DIR}/
cp ${WWW_DIR}/db/repomanager.db ${BACKUP_CONF_DIR}/
cp ${WWW_DIR}/db/repomanager-stats.db ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/logs ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/operations/pid ${BACKUP_CONF_DIR}/
cp -r ${WWW_DIR}/.temp ${BACKUP_CONF_DIR}/

# Téléchargement de la nouvelle version :
wget --no-cache -q "https://github.com/lbr38/repomanager/releases/download/${GITHUB_VERSION}/repomanager_${GITHUB_VERSION}.tar.gz"
if [ $? -ne "0" ];then
    exit 2
fi

# Extraction de l'archive
tar xzf repomanager_${GITHUB_VERSION}.tar.gz
if [ $? -ne "0" ];then
    exit 3
fi

# Entre dans les fichiers décompréssés
cd "/tmp/repomanager-update_${GITHUB_VERSION}/repomanager"

## Création des répertories cibles si n'existent pas
mkdir -p "${WWW_DIR}/public"
mkdir -p "${WWW_DIR}/ressources"
mkdir -p "${WWW_DIR}/tools"
mkdir -p "${WWW_DIR}/templates"
mkdir -p "${WWW_DIR}/api"
mkdir -p "${WWW_DIR}/db"

# Copie des fichiers au bon endroit
# Copie de tous les fichiers
rsync -a --quiet ./ ${WWW_DIR}/
if [ $? -ne "0" ];then
    (( UPDATE_ERROR++ ))
fi
# Seconde copie des fichiers .php uniquement en supprimant ceux inutilisés
rsync -a --quiet --delete-after --include '*/' --include '*.php' --exclude '*' ./ ${WWW_DIR}/
if [ $? -ne "0" ];then
    (( UPDATE_ERROR++ ))
fi

# Remise en place des configurations sauvegardées
\cp ${BACKUP_CONF_DIR}/colors.php ${WWW_DIR}/ressources/styles/colors.php
\cp ${BACKUP_CONF_DIR}/repomanager.conf ${WWW_DIR}/configurations/repomanager.conf
\cp ${BACKUP_CONF_DIR}/repomanager.db ${WWW_DIR}/db/repomanager.db
\cp ${BACKUP_CONF_DIR}/repomanager-stats.db ${WWW_DIR}/db/repomanager-stats.db
\cp -r ${BACKUP_CONF_DIR}/logs ${WWW_DIR}/
\cp -r ${BACKUP_CONF_DIR}/pid ${WWW_DIR}/operations/
\cp -r ${BACKUP_CONF_DIR}/.temp ${WWW_DIR}/

# Si il y a eu des erreurs alors on quitte
if [ $UPDATE_ERROR -ne "0" ];then
    exit 4
fi

# Nettoyage
cd "$WWW_DIR" &&
# Nettoyage de certains vieux répertoires ou fichiers inutilisés si existe dans la cible
rm -rf "${WWW_DIR}/archives"
rm -rf "${WWW_DIR}/_archives"
rm -rf "${WWW_DIR}/vars"
rm -rf "${WWW_DIR}/jquery"
rm -rf "${WWW_DIR}/chartjs"
rm -rf "${WWW_DIR}/fonts"
rm -rf "${WWW_DIR}/images"
rm -rf "${WWW_DIR}/icons"
rm -rf "${WWW_DIR}/styles"
rm -rf "${WWW_DIR}/js"
rm -rf "${WWW_DIR}/ressources"
rm -rf "${WWW_DIR}/logs/plans"
rm -rf "${WWW_DIR}/operations_prechecks"
rm -rf "${WWW_DIR}/customs_errors"
rm -f "${WWW_DIR}/configurations/groups.conf"
rm -f "${WWW_DIR}/configurations/hosts.conf"
rm -f "${WWW_DIR}/configurations/repos.list"
rm -f "${WWW_DIR}/configurations/repos-archive.list"
rm -f "${WWW_DIR}/operations/cronjob_daily.php"
rm -f "${WWW_DIR}/configurations/envs.conf"
rm -f "${WWW_DIR}/configurations/display.ini"

# Suppression du répertoire de mise à jour
rm "/tmp/repomanager-update_${GITHUB_VERSION}/" -rf

exit 0
