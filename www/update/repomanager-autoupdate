#!/bin/bash
# Script de mise à jour de repomanager
# Il télécharge la dernière archive tar.gz disponible, la décompresse et copie les fichiers et répertoires
set -u

CURRENT="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
WWW_DIR=$(echo "$CURRENT" | sed 's|/update||g')
GITHUB_VERSION=$(cat ${WWW_DIR}/cron/github.version)

if [ -z "$GITHUB_VERSION" ];then
    echo -e "[ ERREUR ] Numéro de version github inconnu"
    exit 1
fi

# On supprime le répertoire de travail si existe déjà, puis on le recrée vide
rm /tmp/repomanager-update_${GITHUB_VERSION}/ -rf &&
mkdir -p /tmp/repomanager-update_${GITHUB_VERSION}/ &&
cd /tmp/repomanager-update_${GITHUB_VERSION}/

# Téléchargement de la nouvelle version :
wget --no-cache -q "https://github.com/lbr38/repomanager/releases/download/${GITHUB_VERSION}/repomanager_${GITHUB_VERSION}.tar.gz"
if [ $? -ne "0" ];then
    echo -e "[ ERREUR ] lors du téléchargement (https://github.com/lbr38/repomanager/releases/download/${GITHUB_VERSION}/repomanager_${GITHUB_VERSION}.tar.gz)"
    exit 1
fi

tar xzf repomanager_${GITHUB_VERSION}.tar.gz
if [ $? -ne "0" ];then
    echo -e "[ ERREUR ] lors de l'extraction"
    exit 1
fi

# Copie des fichiers au bon endroit
cd /tmp/repomanager-update_${GITHUB_VERSION}/repomanager &&
# .php
rsync -a --quiet --include '*/' --include '*.php' --exclude '*' www/ ${WWW_DIR}/ &&
# Css
rsync -a --quiet --delete-after --exclude 'www/styles/colors.php' www/styles/ ${WWW_DIR}/styles/ &&
# JS
rsync -a --quiet --delete-after www/js/ ${WWW_DIR}/js/ &&
# images
rsync -a --quiet --delete-after www/images/ ${WWW_DIR}/images/ &&
# icons
rsync -a --quiet --delete-after www/icons/ ${WWW_DIR}/icons/ &&
# fonts
rsync -a --quiet --delete-after www/fonts/ ${WWW_DIR}/fonts/ &&
# version
rsync -a --quiet version ${WWW_DIR}/
# favicon
rsync -a --quiet www/favicon.ico ${WWW_DIR}/
# display.ini
# Copie du fichier /tmp/repomanager-update_${GITHUB_VERSION}/repomanager/www/configurations/display.ini vers un fichier temporaire dans lequel on va travailler
cp www/configurations/display.ini www/configurations/display.ini.tmp
# On récupère tous les paramètres du nouveau fichier display.ini
# Puis pour chaque paramètres, on récupère sa valeur côté display.ini actuellement en place, ceci afin de ne pas écraser la conf actuelle de l'utilisateur
PARAMETERS=$(egrep "^.*=" www/configurations/display.ini | awk '{print $1}')
for PARAM in $PARAMETERS;do
    ACTUAL_VALUE=$(egrep "^$PARAM" ${WWW_DIR}/configurations/display.ini | awk '{print $3}')
    sed -i "s/${PARAM}.*/${PARAM} = ${ACTUAL_VALUE}/g" www/configurations/display.ini.tmp
done &&
\cp www/configurations/display.ini.tmp ${WWW_DIR}/configurations/display.ini
if [ $? -ne "0" ];then
    echo -e "[ ERREUR ] lors de la mise à jour du répertoire '${WWW_DIR}'"
    exit 1
fi

# Nettoyage
cd "$WWW_DIR" &&
# Suppression de certains vieux répertoires ou fichiers inutilisés si existe dans la cible
rm -rf "${WWW_DIR}/archives"
rm -rf "${WWW_DIR}/vars"
rm -rf "${WWW_DIR}/jquery"
rm -rf "${WWW_DIR}/chartjs"
rm -rf "${WWW_DIR}/logs/plans"
rm -f "${WWW_DIR}/configurations/groups.conf"
rm -f "${WWW_DIR}/configurations/hosts.conf"
rm -f "${WWW_DIR}/configurations/repos.list"
rm -f "${WWW_DIR}/configurations/repos-archive.list"


# Suppression du répertoire de mise à jour
rm /tmp/repomanager-update_${GITHUB_VERSION}/ -rf &&
if [ $? -ne "0" ];then
    echo -e "[ ERREUR ] lors de la suppression de /tmp/repomanager-update_${GITHUB_VERSION}/"
    exit 1
fi

exit 0